/* Variables y operaciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una variable y para qu√© sirve?
Es un espacio en la memoria que sirve para guardar valores primitivos y objetos.
¬øCu√°l es la diferencia entre declarar e inicializar una variable?
Declaramos una variable cuando le ponemos un nombre a dicha variable. Inicializamos cuando le asignamos un valor a dicha variable. 
¬øCu√°l es la diferencia entre sumar n√∫meros y concatenar strings?
Sumar n√∫meros implica operar aritm√©ticamente 2 o m√°s valores. Concatenar strings significa juntar caracteres. 
¬øCu√°l operador me permite sumar o concatenar?
el operador +
2Ô∏è‚É£ Determina el nombre y tipo de dato para almacenar en variables la siguiente informaci√≥n:
Nombre (name, string)
Apellido (lastName, string)
Nombre de usuario en Platzi (userName, string)
Edad (age, number)
Correo electr√≥nico (email, string)
Mayor de edad (older, number)
Dinero ahorrado (saveMoney, number)
Deudas (debt, number)
3Ô∏è‚É£ Traduce a c√≥digo JavaScript las variables del ejemplo anterior y deja tu c√≥digo en los comentarios.
const name = 'Jackeline';
const lastName = 'Puruaya';
const userName = 'jcositas;
const age = 25;
const email = 'jajaja@gmail.com';
let older = 36;
let saveMoney = 25;
let debt = 1;
4Ô∏è‚É£ Calcula e imprime las siguientes variables a partir de las variables del ejemplo anterior:
Nombre completo (nombre y apellido)
const completeName = name + lastName;
Dinero real (dinero ahorrado menos deudas)
let currentlyMoney = saveMoney - debt;
Funciones
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es una funci√≥n?
Es un objeto de primera clase que nos permite agrupar c√≥digo con la finalidad de no repetir c√≥digo constantemente.
¬øCu√°ndo me sirve usar una funci√≥n en mi c√≥digo?
Cuando veo c√≥digo repetido y para mantener un orden. 
¬øCu√°l es la diferencia entre par√°metros y argumentos de una funci√≥n?
Los par√°metros existen al momento de crear una funci√≥n; los valores de los par√°metros son est√°ndar. Los argumentos de un funci√≥n existen al momento de llamar o invocar a la funci√≥n y van cambiando de valor a una espec√≠fico, segun el llamado de cada funci√≥n
2Ô∏è‚É£ Convierte el siguiente c√≥digo en una funci√≥n, pero, cambiando cuando sea necesario las variables constantes por par√°metros y argumentos en una funci√≥n:
const name = "Juan David";
const lastname = "Castro Gallego";
const completeName = name + lastname;
const nickname = "juandc";
function completeName (completeName, nickName){
    return "Mi nombre es " + completeName + ", pero prefiero que me digas "+ nickname + ".";
}
function(Jackeline, Jackie);
function(Pepito, Pepi)
console.log("Mi nombre es " + completeName + ", pero prefiero que me digas " + nickname + ".");
Condicionales
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un condicional?
Es una estructura de control
¬øQu√© tipos de condicionales existen en JavaScript y cu√°les son sus diferencias?
Existen if, else, else if, y switch. 
¬øPuedo combinar funciones y condicionales?
Claro que s√≠
2Ô∏è‚É£ Replica el comportamiento del siguiente c√≥digo que usa la sentencia switch utilizando if, else y else if:
const tipoDeSuscripcion = "Basic";

switch (tipoDeSuscripcion) {
   case "Free":
       console.log("Solo puedes tomar los cursos gratis");
       break;
   case "Basic":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
       break;
   case "Expert":
       console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
       break;
   case "ExpertPlus":
       console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
       break;
}
if (tipoDeSuscripcion == 'Free'){
      console.log("Solo puedes tomar los cursos gratis");
} else if(tipoDeSuscripcion == 'Basic'){
    console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
} else if(tipoDeSuscripcion == 'Expert'){
     console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
} else if(tipoDeSuscripcion == 'ExpertPlus'){
     console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
}
3Ô∏è‚É£ Replica el comportamiento de tu condicional anterior con if, else y else if, pero ahora solo con if (sin else ni else if).
üí° Bonus: si ya eres una experta o experto en el lenguaje, te desaf√≠o a comentar c√≥mo replicar este comportamiento con arrays u objetos y un solo condicional. üòè
if (tipoDeSuscripcion == 'Free'){
      console.log("Solo puedes tomar los cursos gratis");
} 
if(tipoDeSuscripcion == 'Basic'){
    console.log("Puedes tomar casi todos los cursos de Platzi durante un mes");
}
if(tipoDeSuscripcion == 'Expert'){
     console.log("Puedes tomar casi todos los cursos de Platzi durante un a√±o");
}
if(tipoDeSuscripcion == 'ExpertPlus'){
     console.log("T√∫ y alguien m√°s pueden tomar TODOS los cursos de Platzi durante un a√±o");
}
Ciclos
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un ciclo?
Es la repetici√≥n de un evento.
¬øQu√© tipos de ciclos existen en JavaScript?
Existen ciclos tales como : for(), for (in), for (of), while, do While
¬øQu√© es un ciclo infinito y por qu√© es un problema?
Es aquel no tiene forma de terminar. Es un problema porque crashea la memoria de la computadora. 
¬øPuedo mezclar ciclos y condicionales?
Por supuesto.
2Ô∏è‚É£ Replica el comportamiento de los siguientes ciclos for utilizando ciclos while:
for (let i = 0; i < 5; i++) {
    console.log("El valor de i es: " + i);
}
let i = 0;
while(i<5){
    console.log("El valor de i es: " + i);
    i++;
}
for (let i = 10; i >= 2; i--) {
    console.log("El valor de i es: " + i);
}
let i = 10
while(i > = 2){
    console.log("El valor de i es: " + i);
    i--;
}
3Ô∏è‚É£ Escribe un c√≥digo en JavaScript que le pregunte a los usuarios cu√°nto es 2 + 2. Si responden bien, mostramos un mensaje de felicitaciones, pero si responden mal, volvemos a empezar.
üí° Pista: puedes usar la funci√≥n prompt de JavaScript.

function mathPower(){
    let answer = prompt('Cu√°nto es 2 +2');
    if (answer == 4){
        return alert('Felicitaciones')
    } else {
        return mathPower()
    }
}
mathPower()

Listas
1Ô∏è‚É£ Responde las siguientes preguntas en la secci√≥n de comentarios:
¬øQu√© es un array?
Es una colecci√≥n de datos que no guardan relaci√≥n entre s√≠ necesariamente.
¬øQu√© es un objeto?
Es la representaci√≥n de propiedades y acciones que guardan relaci√≥n entre s√≠. 
¬øCu√°ndo es mejor usar objetos o arrays?
Los objetos es mejor usarlos cuando tenemos que manejar mucha cantidad de datos.
Los arrays sirven para hacer ejercicios pr√°cticos, no tanto para almacenar vol√∫menes de informaci√≥n.
¬øPuedo mezclar arrays con objetos o incluso objetos con arrays?
Claro 
2Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima su primer elemento.

3Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier array como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el array completo).

4Ô∏è‚É£ Crea una funci√≥n que pueda recibir cualquier objeto como par√°metro e imprima todos sus elementos uno por uno (no se vale imprimir el objeto completo). */

function myArr (arr){
    return arr[0];
}
myArr(['a','e'])

function printAllElements(arr){
   let newElement = '';
    for(let i = 0; i <= arr.length-1; i++){
        let element = '';
            element = arr[i];
            newElement += `${element} \n`;        
        
    }
 
    return newElement ; 
   
}
console.log(printAllElements([ 'a', 'e', 'i', 'o', 'u']))

function myObj (obj){
    let printObj = '';
    for(let element in obj){
        let printKey = '';
        let printValue = '';
        printKey = element;
        printValue = obj[element];

        printObj += `${printKey}:${printValue}\n`;
        //console.log(element+ ':'+ obj[element])
    }
    
    return printObj;
}
console.log(myObj({name:'Toyota', annio:2021, kilometraje: 0}))